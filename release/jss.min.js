/** 
 * jss - v0.1.0 
 * Create Date -2017-03-14 16:45:14
 * Copyright (c) 2017 jerry; Licensed GPLv2 
 */
var jsstpls = {};

jsstpls["tpl/tip"] = "<dl><dt>标题</dt><dd>内容</dd></dl>";

(function(){
	_jss = window.jss =function(name){
		if(typeof name === 'object' && name.isJss){
			//jss对象传入时直接返回
			return name;
		}else{
			return _jss.fn.selector(name);
		}
	}
	_jss.fn = jss.prototype;
})();
_jss.fn.addClass = function(arr, newclass){
	if(!this.isCollection(arr)){
	    arr = [arr];
	}
	for(var i = 0; i<arr.length; i++){
	    var entity = arr[i];
	    var boo = this.hasClass(entity, newclass);
	    if(!boo){
	        entity.className +=" "+newclass;
	    }
	}

}
_jss.fn.ajax = function(opt){
	var xmlhttp;
	//1.
	if (window.XMLHttpRequest) {
	    try {
	        xmlhttp = new XMLHttpRequest();
	        if( xmlhttp.overrideMimeType ){
			    xmlhttp.overrideMimeType("text/html; charset=UTF-8");
			}
	    } catch(e) {}
	} else if (window.ActiveXObject) {
	    try {
	        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
	    } catch(e) {
	        try {
	            xmlhttp = new ActiveXObject("Msxml2.XMLHttp");
	        } catch(e) {
	            try {
	                xmlhttp = new ActiveXObject("Msxml3.XMLHttp");
	            } catch(e) {}
	        }
	    }
	}
	//2.
	xmlhttp.onreadystatechange = function() {
	    if (xmlhttp.readyState == 4) { //readystate 为4即数据传输结束
	    	var r = "";
	        try {
	            if (xmlhttp.status == 200) {
	            	var result = xmlhttp.responseText;
	            	try{
	            		//默认返回值为JSON数据
	            		result = JSON.parse(result);
	            	}catch(e){
	            		// e todo
	            	}
	                opt.success && opt.success.call(this, result);
	            } else {
	                opt.error && opt.error.call(this, xmlhttp);
	            }
	        } catch(e) {
	            opt.error && opt.error.call(this, e);
	        }
	    }
	}
	
	//构造请求参数
	var param = "";
	if(opt.data){
		for(var key in opt.data){
			param += (key + "=" + opt.data[key] + "&");
		}
		param = param.substring(0, param.length-1);
	}
	//构造GET请求
	var metch = opt.type || 'GET';
	var sendParam = null;
	if(metch === "GET" && param){
		opt.url += ('?' + param);
	}else{
		//POST 请求参数
		sendParam = JSON.stringify(opt.data);
	}
	//3.
	var isAsync = true;  //缺省为异步请求
	if(opt.async === false || opt.async === "false"){
		isAsync = false;
	}
	xmlhttp.open(metch, opt.url, isAsync);
	if(metch === "POST"){
		// xmlhttp.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		xmlhttp.setRequestHeader("Content-Type","application/json;charset=UTF-8");
	}
	//设置请求头
	if(opt.header){
		for(var key in opt.header){
			xmlhttp.setRequestHeader(key, opt.header[key]);
		}
	}
	xmlhttp.send(sendParam); 

}
_jss.fn.append = function(result, obj){
	if(typeof obj == 'string'){
		obj = document.createTextNode(obj);
	}
	if(!this.isCollection(obj)){
        obj = [obj];
    }
    for(var i = 0; i<obj.length; i++){
    	result.appendChild(obj[i]);
    }
	return obj;
}
_jss.fn.setAttr = function(result, params){
	//设置
	if(params && !this.isCollection(result)){
        result = [result];
    }
    for(var i = 0; i<result.length; i++){
        var o = result[i];
        add(o);
    }
    function add(o){
        for(var key in params){
            if(key == "style"){
                o.style.cssText = params[key];
            }else if(key == "class"){
                o.className = params[key];
            }else{
                o.setAttribute(key, params[key]);
            }
        }
    }
}
/*
 * 获取元素属性
 * @param result dom对象
 * @param attrName 属性名
 */
_jss.fn.getAttr = function(result, attrName){
	//获取
	if(attrName == "class"){
        return result.className;
    }else if(attrName == "style"){
        return result.style.cssText;
    }else{
        return result.getAttribute(attrName);
    }
}
_jss.fn.children = function(result){
	var r = [],nodes = result.childNodes;
	for(var i=0; i<nodes.length; i++) {
		if(nodes[i].tagName) r.push(nodes[i]);
	}
	return r;
}
_jss.fn.clientRect = function(entity){
	return entity.getBoundingClientRect();
}

_jss.fn.clone = function(json){
	var r = {};
	for(var key in json){
		r[key] = json[key];
	}
	return r;
}

_jss.fn.setCookie = function (name, value, expiredays) {
    var todayDate = new Date();
    todayDate.setTime(todayDate.getTime() + expiredays);
    document.cookie = name + "=" + escape(value) + "; path=/; expires=" + todayDate.toGMTString() + ";"
}
/**
*+----------------------------------------------------
*|cookie获取
*+----------------------------------------------------
*| @param name cookie名
*+----------------------------------------------------
*/
_jss.fn.getCookie = function (name) {
    var nameOfCookie = name + "=";
    var x = 0;
    while (x <= document.cookie.length) {
        var y = (x + nameOfCookie.length);
        if (document.cookie.substring(x, y) == nameOfCookie) {
            if ((endOfCookie = document.cookie.indexOf(";", y)) == -1)
                endOfCookie = document.cookie.length;
            return unescape(document.cookie.substring(y, endOfCookie));
        }
        x = document.cookie.indexOf(" ", x) + 1;
        if (x == 0)
            break;
    }
    return "";
}
_jss.fn.createElementByTagName = function(elementName){
	var r = null;
	//兼容处理SVG元素创建
	if(elementName == "svg" || 
		elementName == "rect" ||
		elementName == "circle" ||
		elementName == "ellipse" ||
		elementName == "line" ||
		elementName == "polyline" ||
		elementName == "polygon" || 
		elementName == "path"){

		r = document.createElementNS('http://www.w3.org/2000/svg',elementName);
	}else{

		r = document.createElement(elementName);
	}	
	return r;	
}
_jss.fn.css = function(arr, cssProperty){
	if(!this.isCollection(arr)){
	    arr = [arr];
	}
	for(var i = 0; i<arr.length; i++){
		var element = arr[i];
		if(typeof cssProperty === 'string'){
			//获取样式
			var  xr = "",elm_style = element.currentStyle || window.getComputedStyle(element, null);
			if (elm_style.getPropertyValue) {
				// 处理非IE
				xr = elm_style.getPropertyValue(cssProperty);
			} else {
				// 处理IE
				if(cssProperty=="float")cssProperty = "styleFloat";
				// 将带有'-'样式属性转成驼峰写法 border-color <--> borderColor
				cssProperty = cssProperty.replace(/(\-+)\w/g, function(s) {
					// 将'-'字符后的字母大写
					return s.toUpperCase();
				}).replace("-", "");
				xr = elm_style.getAttribute(cssProperty);
			}
			// 将可用的值返回
			return xr ? xr : elm_style[cssProperty] ? elm_style[cssProperty]	: element.style[cssProperty];
		}else if(typeof cssProperty === 'object'){
			//设置样式
			for(var key in cssProperty) {
				element.style[key] = cssProperty[key];
			}
		}
	}

}
_jss.fn.dialog = function(config, entity){
	var _this = this, di = {};
	// 被遮罩弹窗的元素
	config = config || {};
	entity = entity || document.body;

	// 创建需要的元素
	var bg 			= 	document.createElement('div');
	var panel 		= 	document.createElement('div');
	var header 		= 	document.createElement('div');
	var content 	= 	document.createElement('div');
	var footer 		= 	document.createElement('div');
	var btncancel 	= 	document.createElement('button');
	var btnprimary 	= 	document.createElement('button');

	// 设置样式名
	bg.className 		 = 	'jss-dialog-bg';
	panel.className		 = 	'jss-dialog-panel';
	header.className 	 = 	'jss-dialog-header';
	content.className 	 = 	'jss-dialog-content';
	footer.className 	 = 	'jss-dialog-footer';
	btncancel.className  = 	'jss-dialog-btncancel';
	btnprimary.className = 	'jss-dialog-btnprimary';

	// 设置背景样式
	var bgcss = {
		width: '100%',
		height: '100%',
		position: config.position || 'fixed',
		zIndex: config.zIndex || '99999',
		top: "0",
		left: "0",
		background: "rgba(0,0,0,0.6)"
	};
	// 设置面板样式
	var panelcss = {
		width: config.contentWidth || '50%',
		height: 'auto',
		minHeight: '50px',
		overflow: 'hidden',
		margin: (config.contentTop || '30px') + ' auto 0',
	    position: 'relative',
	    backgroundColor: '#fff',
	    backgroundClip: 'padding-box',
	    border: config.hasborder != false ? '1px solid #999' : '0px',
	    border: config.hasborder != false ? '1px solid rgba(0,0,0,.2)' : '0px',
	    borderRadius: (config.hasBorderRadius != false) ? '6px' : '0px',
	    outline: 0,
	    '-webkitBoxShadow': config.hasShadow != false ? '0 3px 9px rgba(0,0,0,.5)' : 'none',
	    boxShadow: config.hasShadow != false ? '0 3px 9px rgba(0,0,0,.5)' : 'none'
	};
	// 设置弹窗头部样式
	var headercss = {
		padding: '15px',
		fontSize: '24px',
		lineHeight: 1.42857143,
	    fontWeight: 500,
	    display: (config.showHeader != false) ? 'block' : 'none',
	    borderBottom: '1px solid #e5e5e5'
	};
	// 设置弹窗底部样式
	var footercss = {
		padding: '15px',
	    textAlign: 'right',
	    display: (config.showFooter != false) ? 'block' : 'none',
	    borderTop: '1px solid #e5e5e5'
	};
	// 设置弹窗底部取消按钮样式
	var btncancelcss = {
		color: '#fff',
	    backgroundColor: '#f0ad4e',
	    borderColor: '#eea236',
	    display: 'inline-block',
	    outline: 'none',
	    padding: '6px 12px',
	    marginBottom: 0,
	    marginLeft: '5px',
	    fontSize: '14px',
	    fontWeight: 400,
	    lineHeight: 1.42857143,
	    textAlign: 'center',
	    whiteSpace: 'nowrap',
	    verticalAlign: 'middle',
	    '-msTouchAction': 'manipulation',
	    touchAction: 'manipulation',
	    cursor: 'pointer',
	    '-webkit-user-select': 'none',
	    '-moz-user-select': 'none',
	    '-ms-user-select': 'none',
	    userSelect: 'none',
	    backgroundImage: 'none',
	    border: '1px solid transparent',
	    borderRadius: '4px'
	};
	// 设置弹窗底部确定按钮样式
	btnprimarycss = this.clone(btncancelcss);
	btnprimarycss['backgroundColor'] = '#337ab7';
	btnprimarycss['borderColor'] = '#2e6da4';
	// 设置弹窗内容样式
	var contentcss = {
		position: 'relative',
		margin: 0,
		padding: 0,
		minHeight: '50px'
	};

	this.css(bg, bgcss);
	this.css(panel, panelcss);
	this.css(header, headercss);
	this.css(content, contentcss);
	this.css(footer, footercss);
	this.css(btncancel, btncancelcss);
	this.css(btnprimary, btnprimarycss);

	// 设置内容
	header.innerHTML = config.headerHtml || '温馨提示'; // 温馨提示
	btncancel.innerHTML = config.cancelText || '取消'; // 取消 
	btnprimary.innerHTML = config.actionText || '确定';// 确定
	content.innerHTML = config.contentHtml || '<center> Hello world !</center>'

	// 确定按钮 事件处理
	this.bind(btnprimary, 'onclick', function(){
		// alert('is ok ?');
		config.action && config.action.call(di);
	});
	// 取消按钮 事件处理
	this.bind(btncancel, 'onclick', function(){
		config.cancel && config.cancel.call(di);
		// 删除当前弹窗
		di.remove();
	});

	// 将元素添加到文档中
	this.append(panel, header);
	this.append(panel, content);
	this.append(panel, footer);
	this.append(footer, btnprimary);
	this.append(footer, btncancel);
	this.append(bg, panel);
	this.append(entity, bg);

	/*
	 * 删除弹窗
	 */
	di.remove = function(){
		_this.remove(bg);
	};

	return di;
}
_jss.fn.dragElement = function(entity, callback){
    var _drag = {},_this = this;
    //初始化
    _drag.init = function (o, callback){
        o.onmousedown = this.start;
        o.dragEnd = this.end;
        callback&&(o.___cback = callback);
    }
    //开始
    _drag.start = function (e){

        var o,e = _this.fixEvent(e);
        e.preventDefault && e.preventDefault();
        _drag.o = o = this;
        //this.style.position="absolute";
        o.x = e.clientX - _drag.o.offsetLeft;
        o.y = e.clientY - _drag.o.offsetTop;
        document.onmousemove = _drag.move;
        document.onmouseup = _drag.end;
    }
    //移动
    _drag.move = function (e){
        var oLeft,oTop,e = _this.fixEvent(e);
        oLeft = e.clientX - _drag.o.x;
        oTop = e.clientY - _drag.o.y;
        _drag.o.style.left = oLeft + 'px';
        _drag.o.style.top = oTop + 'px';
        _drag.o.___cback&&_drag.o.___cback.call(_drag.o,oLeft,oTop);
    }
    //结束
    _drag.end = function (){
      _drag.o = document.onmousemove = document.onmouseup = null;
    }

    //初始化入口
    _drag.init(entity, callback);

    return _drag;
}

_jss.fn.stopPropagation = function(ev){
	var e=window.event || event;
    if(e.stopPropagation){
        e.stopPropagation();
    }else{
        e.cancelBubble = true;
    }
}
/*
 * 安装事件
 */
_jss.fn.fixEvent = function(e){
    if(!window.event&&!e){
        var r,eventExec = "arguments.callee.caller";
        while(!r){
            eventExec += ".caller";
            r = eval(eventExec+".arguments[0]");
            r && (r.toString() != '[object MouseEvent]') && (r = null);
        }
        return r;
    }
    return (window.event || e);
}
/*
 * 事件绑定
 * @param arr 可以绑定一个dom 对象数组
 * @param type 事件类型如：onclick,onchange,onkeydown等
 * @param callback 回调方法
 */
_jss.fn.bind = function(arr, type, callback) {
    var _this = this;
    if(!arr)return ;
    if(!this.isCollection(arr)){
        arr = [arr];
    }
    for(var i = 0; i<arr.length; i++){
        var o = arr[i];
        if(typeof o != "object")continue;
        // o['_'+type] = callback;//缓存绑定的事件，方便日后解绑,因为解绑的事件必须与绑定的事件一至
        function fn(o){
            return function(e){
                callback && callback.call(o, e);
            }
        }
        o['_'+type] = fn(o);
        addEv(o);
    }
    function addEv(o){
        var fn = o['_'+type];
        if (o.attachEvent) {
            // IE6+
            o.attachEvent(type, fn, false);
        } else if (o.addEventListener) {
            // chrome,firefox
            o.addEventListener(type.substring(2), fn, false);
        } else {
            o[type] = fn;
        }
    }
}

/*
 * 事件解绑
 * @param arr
 * @param type 事件类型如：onclick,onchange,onkeydown等
 * [注]解绑时，o和callback函数必须与绑定时的相同
 */
_jss.fn.unbind = function(arr, type) {
    if(!arr)return ;
    if(!this.isCollection(arr)){
        arr = [arr];
    }
    for(var i = 0; i<arr.length; i++){
        var o = arr[i];
        if(typeof o != "object")continue;
        removeEv(o, o['_'+type]);
    }
    function removeEv(o, callback){
        if (o.removeEventListener) {
            o.removeEventListener(type.substring(2), callback, false);
        } else if (o.detachEvent) {
            o.detachEvent(type, callback||function(){});
        } else {
            o[type] = null;
        }
    }
}




_jss.fn.getElementsByClass = function(clazzName, entity){
	var cNames,
		cName,
		r = [],
		elems = entity ? entity.getElementsByTagName("*") : (document.all || document.getElementsByTagName("*"));
	for(var i = 0; i<elems.length; i++){
		cName = elems[i].className;//获取当前对象的类名
		if(cName){
			cNames = cName.split(" ");//类名存在，则进行拆分
			for(var j = 0; j<cNames.length; j++){
				if(cNames[j] && cNames[j] == clazzName){
					r.push(elems[i]);//类名存在且与指定的名相同，则存储对象
				}
			}
		}
	}
	elems=cNames=cName=null;
	return r;	
}
_jss.fn.getElementById = function(id, entity){
	var r = null, elems = null;
	if(entity){
		elems = entity.getElementsByTagName('*');
		for(var i = 0; i < elems.length; i++){
			var item = elems[i];
			if(item.id == id){
				return item;
			}
		}
	}else{
		r = document.getElementById(id);
	}	
	return r;	
}
_jss.fn.getElementsByTagName = function(tagName, entity){
	var r = [], elems = null;
	if(entity){
		elems = entity.getElementsByTagName('*');
		for(var i = 0; i < elems.length; i++){
			var item = elems[i];
			if(item.tagName == tagName.toLocaleUpperCase()){
				r.push(item);
			}
		}
	}else{
		r = document.getElementsByTagName(tagName);	
	}	
	return r;	
}

_jss.fn.hasClass = function(result, className){

	return new RegExp('(\\s|^)'+className+'(\\s|$)').test(result.className);
}
_jss.fn.inputTimer = function (input, onFocusCallback, onBlurCallback, time){
    //var input = document.getElementById('search_input');
    var inputPrevValue = input.value;
    input.onfocus=function(){
    	//开启timer 时时监控值的改变
        input._searchInputTimer = setInterval(function(){
            var currentValue = input.value;
            if(inputPrevValue != currentValue){
                inputPrevValue =  currentValue;
                onFocusCallback && onFocusCallback.call(input);
            }
        },time || 100);
    }
    input.onblur=function(){
    	//清除timer的监控
        if(input._searchInputTimer){
            clearInterval(input._searchInputTimer);
            input._searchInputTimer = null;
            onBlurCallback && onBlurCallback.call(input);
        }
    }
}
_jss.fn.isCollection = function(entity){

	return this.isArray(entity) || this.isHTMLCollection(entity);
}
/*
 * 判断是否为数组
 */
_jss.fn.isArray = function(entity){
    return Object.prototype.toString.call(entity) === "[object Array]";
},
/*
 * 判断是否为数组
 */
_jss.fn.isHTMLCollection = function(entity){
    return Object.prototype.toString.call(entity) === "[object HTMLCollection]" ||
           Object.prototype.toString.call(entity) === "[object NodeList]";
}
_jss.fn.isee = function(target, obj, isFind){
		//find();参数为空时，则查找所有
		if(isFind && !target && obj.result){
			obj.result = obj.result.getElementsByTagName('*');
			return obj;
		}
    	/*
		 * 参数为dom对象
    	 */
    	if(typeof target === 'object' && !target.isJss){
    		obj.result = target;
    		return obj;
    	}

    	// 备用名，过滤掉【# . 】等前缀
    	var xname = target ? target.substring(1) : '';

		/**
		 * 通过ID获取元素
		 * @param name 为元素 #id
		 */
		if(/^#[^\s]+$/.test(target)){

			obj.result = this.getElementById(xname, isFind ? obj.result : null);
			return obj;
		}

		/**
		 * 通过CLASS获取元素
		 * @param name 为元素 .className
		 */
		if(/^\.[^\s]+$/.test(target)){
			obj.result = isOneDom(this.getElementsByClass(xname, isFind ? obj.result : null));
			return obj;
		}

		/**
		 * 通过标签名获取元素
		 * @param name 为元素的标签名称如：div
		 */
		if(/^[a-zA-z0-9]+$/.test(target)){
			obj.result = isOneDom(this.getElementsByTagName(target, isFind ? obj.result : null));
			return obj;
		}
		
		/**
		 * 根据dom标签字符串创建dom元素
		 * @param name 为html标签名如：'<div>'
		 */
		if(/^\<[^\>\<]+\>$/.test(target)){
			var tagName = target.replace(/^\<+|\>+$/g,"").toLocaleLowerCase();
			obj.result = this.createElementByTagName(tagName);
			return obj;
		}	
		
		//数组里只有一个元素时，则只取这一个对象
	    function isOneDom(o){
	    	if(o && o.length == 1){
	    		return o[0];
	    	}else{
	    		return o;
	    	}
	    }

}
_jss.fn.parent = function(result){
	var r = result.parentNode;
	while(!r.tagName) {
		r = r.parentNode;
		if(!r)return;
	}
	return r;
}

_jss.fn.queryUrlParam = function(name){
	var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
    var r = window.location.search.substr(1).match(reg);
    if (r !== null) return decodeURIComponent(r[2]); 
    return null;
}

_jss.fn.remove = function(result){
    if(!this.isCollection(result)){
        result = [result];
    }
    for(var i = 0; i<result.length; i++){
        this.parent(result[i]).removeChild(result[i]);
    }
}
_jss.fn.removeClass = function(arr, className){
	if(!this.isCollection(arr)){
	    arr = [arr];
	}
    for(var i = 0; i<arr.length; i++){
        var entity = arr[i];
        var entityClass = entity.className || "";
        if(entityClass && this.hasClass(entity, className)){
            entityClass = entityClass.replace(new RegExp('(\\s|^)'+className+'(\\s|$)')," ");
            entity.className = entityClass.trim();
        }
    }

}
_jss.fn.selector = function (name){
	var _this = {}, fn=this;

	/*
	 * jss对象标记
	 */
	_this.isJss = true;

	/**
	 * 获取原始dom元素
	 */
	_this.getDom = function(){
		return _this.result;
	}

	/**
	 * 向元素后加入元素
	 * @param obj 一个dom元素或一组元素
	 */
	_this.append = function(obj){
		if(obj.isJss){
			obj = obj.result;
		}
		if(obj && obj.length){
			for(var i = 0; i<obj.length; i++){
				fn.append(_this.result, obj[i]);
			}
		}else{
			fn.append(_this.result, obj);
		}
		return _this;
	}

	/**
	 * 获取元素的innerHTML
	 * @param text 参数存在时，则设置html
	 */
	_this.html = function(text){
		if(text){
			_this.result.innerHTML = text;
			return _this;
		}
		return _this.result.innerHTML;
	}

    /*
     * 是否包含指定的类名
     * @param className 类名
     */
    _this.hasClass = function(className){
         return fn.hasClass(
            filterArrFirst(_this.result), 
            className
         );
    }
    
	/*
     * 是否包含指定的类名
     * @param className 类名
     */
    _this.css = function(cssProperty){
        var r = fn.css(
            _this.result, 
            cssProperty
        );
        if(typeof cssProperty === 'string'){
            return r;
        }else{
            return _this;
        }
    }

	/*
     * 向元素中添加class样式
     * @param className 类名
     */
    _this.addClass = function(className){
    	fn.addClass(_this.result, className);
        return _this;
    }

    /*
     * 获取所有子节点，不包括孙节点
     */
    _this.children = function(){
    	_this.result = fn.children(_this.result);
    	return _this;
    }

	/*
     * 删除元素中class样式
     * @param className 类名
     */
    _this.removeClass = function(className){
    	fn.removeClass(_this.result, className);
        return _this;
    }

	/*
     * 获取和设置元素属性
     * @param value 属性名 或 属性json对象
     */
    _this.attr = function(value){
    	if(typeof value === 'string'){
    		return fn.getAttr(
    			filterArrFirst(_this.result), 
    			value
    		);
    	}else{
    		fn.setAttr(_this.result, value);
    		return _this;
    	}
    }
    
    /*
     * 获取父节点
     */
    _this.parent = function(){
        _this.result = fn.parent(
            filterArrFirst(_this.result)
        );
        return _this;
    }
    
    /*
	 * 从当前结果下所有子节点包括孙节点 中查找指定元素
     * @param index 选择器参数#id 或 .class 或 div标签名等, 参数为空时获取所有子节点及孙节点
     */
    _this.find = function( index ){
    	return fn.isee(index , _this, true);
    }

    /*
     * 获取当前元素的显示区信息，返回对象包含top,left,right,bottom,width,height
     */
    _this.clientRect = function(){
        return fn.clientRect(
            filterArrFirst(_this.result)
        );
    }
    
    /*
	 * 删除节点
     */
    _this.remove = function(){
    	fn.remove(_this.result);
    	return _this;
    }
    
    /*
	 * 切换样式
     */
    _this.toggleClass = function(className){
    	fn.toggleClass(_this.result, className);
    	return _this;
    }
    
    /*
	 * 事件绑定
	 * @param type   	事件类型，如：onclick, onkeyup,onkeydown ...
	 * @param callback  事件回调
     */
    _this.bind = function(type, callback){
    	fn.bind(_this.result, type, callback);
    	return _this;
    }
    
    /*
	 * 事件解绑定
	 * @param type   	事件类型，如：onclick, onkeyup,onkeydown ...
     */
    _this.unbind = function(type){
    	fn.unbind(_this.result, type);
    	return _this;
    }

    /*
     * 停止事件的传播，阻止它被分派到其他 Document 节点
     * @param e 事件源
     */
    _this.stopPropagation = function(e){
        fn.stopPropagation(e);
        return _this;
    }

    /**
     * 获取唯一编号
     */
    _this.uuid = function(){
        return fn.uuid();
    }
    
    /**
     * cookie设置和获取
     * @param opt cookie名字或设置cookie信息；如：{name:'', value:'', time:'过期时间'}
     */
    _this.cookie = function(opt){
        
        if(typeof opt === 'string'){
            //获取
            return fn.getCookie(opt);
        }else{
            //设置
            fn.setCookie(opt.name, opt.value, opt.time);
            return _this;
        }
    }

    /**
     * AJAX 请求
     * @param opt.url 请求地址
     * @param opt.success 成功回调
     * @param opt.error 失败回调
     * @param opt.type 请求方法 缺省值为GET
     * @param opt.data 请求参数
     * @param opt.header 设置请求头 {key: value}
     * @param opt.async 是否异步请求数据，缺省值为是
     */
    _this.ajax = function(opt){
        fn.ajax(opt);
        return _this;
    }

    /*
     * ie8跨域请求
     * @param opt.url   请求地址
     * @param opt.type  请求方法  POST 或 GET
     * @param opt.time  请求超时
     * @param opt.data  请求参数  json对象字符串
     */
    _this.xdr = function(opt){
        fn.xdr(opt);
        return _this;
    }

    /**
     * 监听输入框输入的值
     * @param input 输入框dom对象
     * @param onFocusCallback 获得焦点时回调
     * @param onBlurCallback  失去焦点时回调
     * @param time 监听频率 缺省值100毫秒
     */
    _this.inputTimer = function(onFocusCallback, onBlurCallback, time){
        fn.inputTimer(
            filterArrFirst(_this.result), 
            onFocusCallback, 
            onBlurCallback, 
            time
        );
        return _this;
    }

    /*
     * 使元素自由可拖拽
     * @param callback 回调
     * callback(left, top); //this为当前拖拽对象
     *【注】使用时请先将元素设置绝对定位！！！！
     */
    _this.drag = function(callback){
        fn.dragElement(
            filterArrFirst(_this.result),
            callback
        );
        return _this;
    }

    /**
     * 获取浏览器参数名称
     * @param name 浏览器地址参数名
     */
    _this.queryUrlParam = function(name){
        return fn.queryUrlParam(name);
    }

    /**
     * 打开弹窗
     * @param config 弹窗配制
     */
    _this.dialog = function(config){
       return fn.dialog(config, filterArrFirst(_this.result));
    }
    
    /**
     * 克隆json对象
     * @param jsonobject json对象
     * @return 新的json对象
     */
    _this.clone = function(jsonobject){
        return fn.clone(jsonobject);
    }

    /**
     * 校验结果
     * 当结果为数组时返回第一个元素
     * [注]在必要的方法里使用 比如：hasClass,多个结果，只取第一个
     */
    function filterArrFirst(o){
    	if(o && o.length){
    		o = o[0];
    	}
    	return o;
    }
    

    return fn.isee(name , _this);
}

//+---------------------------------------------------------------------	
//|去所有空格
//+---------------------------------------------------------------------	
String.prototype.trims = function() {return this.replace(/[ ]/g,"");}
//+---------------------------------------------------------------------
//|去两边空格
//+---------------------------------------------------------------------
String.prototype.trim = function() {return this.replace(/^\s+|\s+$/g,"");}
//+---------------------------------------------------------------------
//|去左边空格
//+---------------------------------------------------------------------
String.prototype.ltrim = function() {return this.replace(/^\s+/,"");}
//+---------------------------------------------------------------------
//|去右边空格
//+---------------------------------------------------------------------
String.prototype.rtrim = function() {return this.replace(/\s+$/,"");}
_jss.fn.toggleClass = function(result, className){
	if(!this.isCollection(result)){
        result = [result];
    }
    for(var i = 0; i<result.length; i++){
        var entity = result[i];
        var entityClass = entity.className || "";
        var newCName = "";
        if(entityClass && this.hasClass(entity, className)){
            newCName = entityClass.replace(new RegExp('(\\s|^)'+className+'(\\s|$)')," ");
        }else{
            newCName = (entityClass + " " + className);
        }
        newCName = newCName.replace(new RegExp('(\\s\\s)'), " "); //去掉连续空格
        entity.className = newCName;
    }
}
_jss.fn.uuid = function(){
	window._____uuid = (window._____uuid || 1000) + 1;
    return window._____uuid;
}
_jss.fn.xdr = function(opt){	

	var xdr;

    function alert_error(){
        alert("XDR onerror");
    }
    function alert_timeout(){
        alert("XDR ontimeout");
    }
    function alert_progress(){
        alert("XDR onprogress");
    }
    function req_abort(){
        if(xdr){
            xdr.abort(); // Abort XDR if the Stop button is pressed. 
        }
    }

    /*
	 * 请求
	 * @param url 		请求url
	 * @param metch 	请求方法
	 * @param data      请求参数字符串
	 * @param time      请求超时
     */
    function req_init(url, metch, time, data, callback) {
        var timeout = time || 10000;
        if (window.XDomainRequest) // Check whether the browser supports XDR. 
        {
            xdr = new XDomainRequest(); // Create a new XDR object.
            if (xdr)
            {
                // There is an error and the request cannot be completed. 
                // For example, the network is not available.
                xdr.onerror     = alert_error;
                        
                // This event is raised when the request reaches its timeout. 
                xdr.ontimeout   = alert_timeout;
                        
                // When the object starts returning data, the onprogress event 
                // is raised and the data can be retrieved by using responseText.
                xdr.onprogress  = alert_progress;
                       
                // When the object is complete, the onload event is raised and 
                // the responseText ensures the data is available. 
                xdr.onload      = function(){
                	callback && callback(xdr.responseText);
                };

                xdr.timeout     = timeout;
                        
                // The URL is preset in the text area. This is passed in the 
                // open call with a get request.
                xdr.open(metch || "GET", url);
                        
                // The request is then sent to the server.  
                xdr.send(data);
            } else {
                alert('Failed to create new XDR object.');
            }
        } else {
            alert('XDR does not exist.');
        }
    }

    //初始化入口
    req_init(opt.url, opt.type, opt.time, opt.data, opt.success);

}